import streamlit as st
import uuid
from datetime import datetime

# Import t·ª´ h·ªá th·ªëng RAG c·ªßa b·∫°n
try:
    from src.rag.generate_response import generate_response
    from src.configs.settings import pinecone_config
except ImportError as e:
    st.error(f"L·ªói import: {e}")
    st.warning("Vui l√≤ng ƒë·∫£m b·∫£o r·∫±ng c·∫•u tr√∫c file v√† c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch√≠nh x√°c.")
    st.stop()

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Chatbot THPT Nh√¢n Ch√≠nh", page_icon="üí¨", layout="centered")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("ü§ñ Chatbot THPT Nh√¢n Ch√≠nh")
st.caption("Tr·ª£ l√Ω AI s·∫µn s√†ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ th√¥ng tin tr∆∞·ªùng h·ªçc.")

# --- Kh·ªüi t·∫°o Session State ---
# Kh·ªüi t·∫°o session ID duy nh·∫•t cho m·ªói phi√™n l√†m vi·ªác
if 'session_id' not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

# Kh·ªüi t·∫°o ch·ªß ƒë·ªÅ chat m·∫∑c ƒë·ªãnh
if 'selected_topic' not in st.session_state:
    st.session_state.selected_topic = pinecone_config.NAME_SPACE.THONG_TIN_TRUONG.value

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat v·ªõi tin nh·∫Øn ch√†o m·ª´ng
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "assistant",
            "content": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ tr∆∞·ªùng THPT Nh√¢n Ch√≠nh?"
        }
    ]

# --- Giao di·ªán Chat ---
# Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥ trong l·ªãch s·ª≠
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Khu v·ª±c nh·∫≠p li·ªáu c·ªßa ng∆∞·ªùi d√πng, c·ªë ƒë·ªãnh ·ªü cu·ªëi trang
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # T·∫°o v√† hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa bot
    with st.chat_message("assistant"):
        # Hi·ªÉn th·ªã spinner trong khi ch·ªù ph·∫£n h·ªìi
        with st.spinner("AI ƒëang suy nghƒ©..."):
            try:
                # G·ªçi h√†m RAG ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi
                response = generate_response(
                    session_id=st.session_state.session_id,
                    query=prompt,
                    namespace=st.session_state.selected_topic
                )
                st.markdown(response)
                # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠
                st.session_state.messages.append({"role": "assistant", "content": response})

            except Exception as e:
                # B·∫Øt l·ªói v√† hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
                error_message = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i. (L·ªói: {e})"
                st.error(error_message)
                st.session_state.messages.append({"role": "assistant", "content": error_message})

# --- Ch·ª©c nƒÉng ph·ª• ---
# Cung c·∫•p n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i cu·ªôc tr√≤ chuy·ªán
if len(st.session_state.messages) > 1: # Ch·ªâ hi·ªán n√∫t sau khi c√≥ √≠t nh·∫•t 1 c√¢u h·ªèi
    if st.button("üóëÔ∏è Tr√≤ chuy·ªán m·ªõi"):
        # Reset l·∫°i l·ªãch s·ª≠ tin nh·∫Øn v√† gi·ªØ nguy√™n session ID
        st.session_state.messages = [
            {
                "role": "assistant",
                "content": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ tr∆∞·ªùng THPT Nh√¢n Ch√≠nh?"
            }
        ]
        st.rerun()